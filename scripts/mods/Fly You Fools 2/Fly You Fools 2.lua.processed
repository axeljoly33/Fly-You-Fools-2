--[[
	author: Uganda (Axel Joly)
	-----
	Copyright © 2023, Uganda
	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
	The Software is provided “as is”, without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders X be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the Software.
	Except as contained in this notice, the name of the <copyright holders> shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from the <copyright holders>. »
	-----
--]]

-------------------
-- LUA UTILITIES --

-- for key,value in pairs(input_manager) do
	-- print(key, value)
-- end
-- for key,value in pairs(getmetatable(input_manager)) do
	-- print(key, value)
-- end

-- for i,v in pairs(input_manager) do print(i,v) end

-- print("x = " .. tostring(x))

-- LUA UTILITIES --
-------------------

local mod = get_mod("Fly You Fools 2")

-- Booleans
mod.is_active_FYF2 = false
mod.is_ingame = false
mod.specialcase_is_in_vortex = false

-- Global variables
mod.cam_fov = 1
mod.font = "hell_shark_header"
mod.color = {255, 255, 255, 255}

-- Backup
mod.backup_move_acceleration_down = 5
mod.backup_gravity_acceleration = 11
mod.backup_MAX_FALL_DAMAGE = 150
mod.backup_MIN_FALL_DAMAGE_HEIGHT = 7
mod.backup_HARD_LANDING_FALL_HEIGHT = 7
mod.release_unhook_time_backup = 1.5
mod.release_unhook_time_ko_backup = 4
mod.leaving_animation_time_backup = 2.83

------------
-- EVENTS --

mod.on_game_state_changed = function(status, state_name)
	-- Prevent the player from staying in flight mode outside being StateIngame
    if status == "enter" and state_name == "StateIngame" then
        mod.is_ingame = true
	else
		mod.is_ingame = false
		if mod.is_active_FYF2 then
			mod:deactivate_FYF2()
		end
    end
end

mod.update = function (dt, t)
	if mod.is_active_FYF2 then
		if Managers.player then
			if Managers.player:local_player() then
				if Managers.player:local_player().player_unit then
					-- Special case : is_in_vortex
					if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_in_vortex() and mod.specialcase_is_in_vortex then
						mod:echo("YES")
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").in_vortex = false
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").in_vortex_unit = nil
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").near_vortex = false
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").near_vortex_unit = nil
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").catapulted = false
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").catapulted_direction = nil
						ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").catapulted_velocity = nil
					end
					
					-- Retrieving movement inputs for flight movement
					local input_source = Managers.input:get_service("Player")
					local move_left = input_source:get("move_left") or 0
					local move_right = input_source:get("move_right") or 0
					local move_forward = input_source:get("move_forward") or 0
					local move_back = input_source:get("move_back") or 0
					local crouch = 0
					local jump = 0
					if type(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.crouching[2]) == "number" then
						crouch = Keyboard.button(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.crouching[2])
					end
					if type(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.jump_1[2]) == "number" then
						jump = Keyboard.button(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.jump_1[2])
					elseif type(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.jump_2[2]) == "number" then
						jump = Keyboard.button(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.jump_2[2])
					elseif type(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.jump_only[2]) == "number" then
						jump = Keyboard.button(Managers.input.stored_keymaps_data["PlayerControllerKeymaps"].win32.keymaps.jump_only[2])
					end
					
					-- Mouse wheel changing speed in an interval
					local speed = 0.0
					if mod:get("step_FYF2") then
						speed = mod:get("speed_FYF2")
					end
					if mod:get("speed_FYF2") then
						speed = speed + (math.floor(Vector3.y(Mouse.axis(Mouse.axis_index("wheel")))) * mod:get("step_FYF2"))
					end
					if speed < 1 then
						speed = 1
					elseif speed > 100 then
						speed = 100
					end
					mod:set("speed_FYF2", speed)
					
					-- Retriveing FPU cam, rotation and components to force movement in function of camera direction
					local local_player = Managers.player.local_player(Managers.player)
					local viewport_name = local_player.viewport_name
					local camera_rotation = Managers.state.camera:camera_rotation(viewport_name)
					local camera_fwdbwd = Quaternion.forward(camera_rotation)
					local camera_rightleft = Quaternion.right(camera_rotation)
					local camera_updown = Quaternion.up(camera_rotation)
					local rotd_x, rotd_y, rotd_z = Vector3.to_elements(camera_fwdbwd)
					local rotr_x, rotr_y, rotr_z = Vector3.to_elements(camera_rightleft)
					local rotu_x, rotu_y, rotu_z = Vector3.to_elements(camera_updown)
					
					if (rotd_x == nil) or (rotd_y == nil) or (rotd_z == nil) then
						rotd_x, rotd_y, rotd_z = 0, 0, 0
					end
					if (rotr_x == nil) or (rotr_y == nil) or (rotr_z == nil) then
						rotr_x, rotr_y, rotr_z = 0, 0, 0
					end
					if (rotu_x == nil) or (rotu_y == nil) or (rotu_z == nil) then
						rotu_x, rotu_y, rotu_z = 0, 0, 0
					end
					
					-- Forced velocity using everything gathered above
					if mod.is_ingame then
						ScriptUnit.extension(Managers.player:local_player().player_unit, "locomotion_system"):set_forced_velocity((((move_forward - move_back) * Vector3(rotd_x, rotd_y, rotd_z)) + ((move_right - move_left) * Vector3(rotr_x, rotr_y, rotr_z)) + ((jump - crouch) * Vector3(rotu_x, rotu_y, rotu_z))) * dt * 40 * mod:get("speed_FYF2"))
					end
				end
			end
		end
	end
end

mod:command("test", "", function(...)
	
end)

-- EVENTS --
------------

--------------------
-- USER FUNCTIONS --

mod.toggle_FYF2 = function (self)
    if not mod.is_active_FYF2 then
        mod:activate_FYF2()
    else
        mod:deactivate_FYF2()
    end
end

mod.activate_FYF2 = function (self)
	if Managers.player then
		if Managers.player:local_player().player_unit and  then
			if ScriptUnit.extension(Managers.player:local_player().player_unit, "health_system"):is_alive() then
				mod.is_active_FYF2 = true
				mod:echo("[FYF] active")
				
				-- Special cases init
				mod.release_unhook_time_backup = PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time
				mod.release_unhook_time_ko_backup = PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time_ko
				PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time = 0
				PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time_ko = 0
				PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).ledge_hanging.leaving_animation_time = 0
				
				-- Managing special cases
				mod:special_cases()
				
				local local_player = Managers.player:local_player()
				local player_unit = Managers.player:local_player().player_unit
				local input_manager = Managers.input
				local first_person_extension = ScriptUnit.has_extension(Managers.player:local_player().player_unit, "first_person_system")
				local health_extension = ScriptUnit.extension(Managers.player:local_player().player_unit, "health_system")
				local status_extension = ScriptUnit.has_extension(Managers.player:local_player().player_unit, "status_system")
				
				-- Invisibility, half-invincibility and enemy noclipping
				health_extension.is_invincible = true
				status_extension:set_invisible(true, nil, "debug_invis")
				status_extension:set_noclip(true, "debug_invis")
				
				-- No limit in cam rotation (360 degrees)
				first_person_extension.MAX_MIN_PITCH = math.pi
				
				-- Movement
				mod:set_movement_FYF2()
				
				-- FoV
				mod.cam_fov = Managers.state.camera._fov_multiplier
				if mod:get("custom_fov_group_FYF2") then
					mod:set_fov_FYF2()
				end
				
				-- View
				if mod:get("hide_ui_FYF2") or mod:get("hide_arms_FYF2") or mod:get("hide_weapon_FYF2") then
					mod:set_view_FYF2()
				end
			end
		end
	end
end

mod.special_cases = function(self)
	-- Unhooked no matter state you are in from a pack master
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_grabbed_by_pack_master() then
		mod:echo(PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time)
		mod:echo(PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time_ko)
		ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):_set_packmaster_unhooked(ScriptUnit.extension(Managers.player:local_player().player_unit, "locomotion_system"), ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").pack_master_status)
	end
	
	-- Unhooked if hanging from hook
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_hanging_from_hook() then
		ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):_set_packmaster_unhooked(ScriptUnit.extension(Managers.player:local_player().player_unit, "locomotion_system"), ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").pack_master_status)
	end
	
	-- Pull up yourself
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):get_is_ledge_hanging() then
		ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").pulled_up = true
	end
	
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_grabbed_by_chaos_spawn() then
		
	end
	
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_grabbed_by_tentacle() then
		
	end
	
	-- Fly out of vortex without being catapulted or anything
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_in_vortex() then
		mod.specialcase_is_in_vortex = true
	end
	
	-- Fly out of catapulted state
	if then
	
	end
	
	-- Overpowered means state when attacked by the green flies. When entering flight mode, flies disappear
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_overpowered() then
		ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").overpowered = false
	end
	
	-- Overcharge disappear and not blocked by it when activating flight mode during overcharge
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "overcharge_system"):are_you_exploding() then
		ScriptUnit.extension(Managers.player:local_player().player_unit, "overcharge_system").lockout = false
		ScriptUnit.extension(Managers.player:local_player().player_unit, "overcharge_system").overcharge_value = 0
		ScriptUnit.extension(Managers.player:local_player().player_unit, "overcharge_system").played_hit_overcharge_threshold = false
		ScriptUnit.extension(Managers.player:local_player().player_unit, "overcharge_system").is_exploding = false
		StatusUtils.set_overcharge_exploding(Managers.player:local_player().player_unit, false)
	end
	
	-- As waiting for assisted respawn count as being alive, you can activate flight mode and assit respawn yourself
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_ready_for_assisted_respawn() then
		ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system").assisted_respawning = true
	end
	
	-- Set you unknocked down as if an ally would revive you
	if ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):is_knocked_down() then
		ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system"):set_knocked_down(false)
	end
end

mod.set_movement_FYF2 = function(self)
	local movement_table = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit)
	if movement_table then
		-- Assigning values to backup variables
		mod.backup_move_acceleration_down = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).move_acceleration_down
		mod.backup_gravity_acceleration = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).gravity_acceleration
		mod.backup_MAX_FALL_DAMAGE = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).fall.heights.MAX_FALL_DAMAGE
		mod.backup_MIN_FALL_DAMAGE_HEIGHT = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).fall.heights.MIN_FALL_DAMAGE_HEIGHT
		mod.backup_HARD_LANDING_FALL_HEIGHT = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).fall.heights.HARD_LANDING_FALL_HEIGHT
		
		-- Modifying movement table values to prevent normal movement (especially fall) and fall damages during flight
		movement_table.move_speed = 0
		movement_table.gravity_acceleration = 0
		movement_table.fall.heights.MAX_FALL_DAMAGE = 0
		movement_table.fall.heights.MIN_FALL_DAMAGE_HEIGHT = math.huge
		movement_table.fall.heights.HARD_LANDING_FALL_HEIGHT = math.huge
	end
	
	-- No collision with environnement
	local mover = Unit.mover(Managers.player:local_player().player_unit)
	Mover.set_collision_filter(mover, "filter_point_of_interest")
	-- Resetting velocity vector when FLight has just been activated
	ScriptUnit.extension(Managers.player:local_player().player_unit, "locomotion_system").velocity_current = Vector3Box(0, 0, 0)
end

mod.reset_movement_FYF2 = function(self)
	local movement_table = PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit)
	local status_extension = ScriptUnit.extension(Managers.player:local_player().player_unit, "status_system")
	
	-- Cancelling fall damage if flight has been deactivated in the air at a high position
	if status_extension and status_extension.fall_height then
		status_extension.fall_height = ((-1) * math.huge)
		status_extension:set_ignore_next_fall_damage(true)
	end
	
	if movement_table then
		-- Default values back to more exotic movement table settings used
		movement_table.player_speed_scale = 1
		movement_table.move_acceleration_up = 8
		movement_table.move_speed = 4
		movement_table.player_air_speed_scale = 0.035000000000000003
		ScriptUnit.extension(Managers.player:local_player().player_unit, "locomotion_system").ignore_gravity = false
		
		-- Default values back to movement table from backup variables
		movement_table.move_acceleration_down = mod.backup_move_acceleration_down
		movement_table.gravity_acceleration = mod.backup_gravity_acceleration
		movement_table.fall.heights.MAX_FALL_DAMAGE = mod.backup_MAX_FALL_DAMAGE
		movement_table.fall.heights.MIN_FALL_DAMAGE_HEIGHT = mod.backup_MIN_FALL_DAMAGE_HEIGHT
		movement_table.fall.heights.HARD_LANDING_FALL_HEIGHT = mod.backup_HARD_LANDING_FALL_HEIGHT
	end
	
	local mover = Unit.mover(Managers.player:local_player().player_unit)
	Mover.set_collision_filter(mover, "filter_player_mover")
end

mod.set_fov_FYF2 = function(self)
	-- Setting custom FoV during flight
	Managers.state.camera:set_fov_multiplier((mod:get("custom_fov_FYF2") * math.pi) / (180 * Managers.state.camera._property_temp_table["vertical_fov"]))
end

mod.reset_fov_FYF2 = function(self)
	-- Setting back default FoV outside flight
	Managers.state.camera:set_fov_multiplier(mod.cam_fov)
end

mod.set_view_FYF2 = function(self)
	local player_unit = Managers.player:local_player().player_unit
	local game_mode = Managers.state.game_mode:game_mode()
	local first_person_extension = ScriptUnit.extension(player_unit, "first_person_system")
	
	-- Hidding UI during flight
	if mod:get("hide_ui_FYF2") then
		if (not game_mode:photomode_enabled()) == true then
			game_mode:set_photomode_enabled(not game_mode:photomode_enabled())
		end
	end
	
	-- Hidding arms during flight
	if mod:get("hide_arms_FYF2") then
		Unit.set_unit_visibility(first_person_extension.first_person_attachment_unit, false)
	end
	
	-- Hidding weapon during flight
	if mod:get("hide_weapon_FYF2") then
		first_person_extension:hide_weapons("X", true)
	end
end

mod.reset_view_FYF2 = function(self)
	local player_unit = Managers.player:local_player().player_unit
	local game_mode = Managers.state.game_mode:game_mode()
	local first_person_extension = ScriptUnit.extension(player_unit, "first_person_system")
	
	-- Exposing back UI during flight
	if (not game_mode:photomode_enabled()) == false then
		game_mode:set_photomode_enabled(not game_mode:photomode_enabled())
	end
	
	-- Exposing back arms during flight
	Unit.set_unit_visibility(first_person_extension.first_person_attachment_unit, true)
	
	-- Exposing back weapon during flight
	first_person_extension:unhide_weapons("X")
end

mod.deactivate_FYF2 = function (self)
	if Managers.player then
		if Managers.player:local_player().player_unit then
			local local_player = Managers.player:local_player()
			local player_unit = Managers.player:local_player().player_unit
			local input_manager = Managers.input
			local first_person_extension = ScriptUnit.extension(player_unit, "first_person_system")
			local health_extension = ScriptUnit.extension(player_unit, "health_system")
			local status_extension = ScriptUnit.extension(player_unit, "status_system")
			
			-- No invisibility, no invincibility and enemy clipping
			health_extension.is_invincible = false
			status_extension:set_invisible(false, nil, "debug_invis")
			status_extension:set_noclip(false, "debug_invis")
			
			-- Default limit in cam rotation
			first_person_extension.MAX_MIN_PITCH = (math.pi / 2 - (math.pi / 15))
			
			-- Special cases backup
			PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time = mod.release_unhook_time_backup
			PlayerUnitStatusSettings.hanging_by_pack_master.release_unhook_time_ko = mod.release_unhook_time_ko_backup
			PlayerUnitMovementSettings.get_movement_settings_table(Managers.player:local_player().player_unit).ledge_hanging.leaving_animation_time = mod.leaving_animation_time_backup
			mod.specialcase_is_in_vortex = false
			
			-- Resetting options that have (or have not) been activated during flight
			mod:reset_movement_FYF2()
			mod:reset_fov_FYF2()
			mod:reset_view_FYF2()
			
			mod.is_active_FYF2 = false
			mod:echo("[FYF] inactive")
		end
	end
end

-- USER FUNCTIONS --
--------------------

--------------------
-- HOOKS --

mod:hook_origin(LocomotionTemplates.PlayerUnitLocomotionExtension, "update_rotation", function (data, t, dt, ...)
	local is_server = Managers.player.is_server
	local Unit_set_local_rotation = Unit.set_local_rotation
	local Quaternion_lerp = Quaternion.lerp
	local Quaternion_look = Quaternion.look
	local Quaternion_forward = Quaternion.forward
	local math_smoothstep = math.smoothstep
	local Vector3_normalize = Vector3.normalize
	local Vector3_flat = Vector3.flat
	local Vector3_dot = Vector3.dot

	for unit, extension in pairs(data.all_update_units) do
		if not extension.disable_rotation_update then
			if extension.rotate_along_direction then
				local first_person_extension = extension.first_person_extension
				local current_rotation = first_person_extension:current_rotation()
				local current_rotation_flat = Vector3_flat(Quaternion_forward(current_rotation))
				-- Using z component so model rotation is the same as FPU cam rotation
				if mod.is_active_FYF2 then
					current_rotation_flat = Quaternion_forward(current_rotation)
				end
				local velocity_current = extension.velocity_current:unbox()
				-- Using z component so model rotation is the same as FPU cam rotation
				if not mod.is_active_FYF2 then
					velocity_current.z = 0
				end
				local velocity_dot = Vector3_dot(velocity_current, current_rotation_flat)
				
				if velocity_dot == 0 then
					local current_rotation_normalised = Vector3_normalize(current_rotation_flat)
					local target_rotation = extension.target_rotation:unbox()
					local target_rotation_flat = Vector3_flat(Quaternion_forward(target_rotation))
					-- Using z component so model rotation is the same as FPU cam rotation
					if mod.is_active_FYF2 then
						target_rotation_flat = Quaternion_forward(target_rotation)
					end
					local target_rotation_normalised = Vector3_normalize(target_rotation_flat)
					local dot = Vector3_dot(current_rotation_normalised, target_rotation_normalised)
					
					if dot < 0 then
						extension.target_rotation:store(current_rotation)
					end
					
					velocity_current = target_rotation_flat
				else
					extension.target_rotation:store(current_rotation)
				end
				
				if velocity_dot < -0.1 then
					velocity_current = -velocity_current
				end
				
				local final_rotation = Quaternion_look(velocity_current)
				
				Unit.set_local_rotation(unit, 0, Quaternion_lerp(Unit.local_rotation(unit, 0), final_rotation, dt * 5))
			elseif extension.target_rotation_data then
				local target_rotation_data = extension.target_rotation_data
				local start_rotation = target_rotation_data.start_rotation:unbox()
				local target_rotation = target_rotation_data.target_rotation:unbox()
				local start_time = target_rotation_data.start_time
				local end_time = target_rotation_data.end_time
				local lerp_t = math_smoothstep(t, start_time, end_time)
				
				Unit_set_local_rotation(unit, 0, Quaternion_lerp(start_rotation, target_rotation, lerp_t))
			end
		end
		
		if is_server then
			local current_position = Unit.world_position(unit, 0)
			local found_nav_mesh, z = GwNavQueries.triangle_from_position(extension._nav_world, current_position, 0.1, 0.3, extension._nav_traverse_logic)
			
			if found_nav_mesh then
				extension._latest_position_on_navmesh:store(Vector3(current_position.x, current_position.y, current_position.z))
			end
		end
		
		extension.disable_rotation_update = false
	end
end)

mod:hook_origin(PlayerUnitLocomotionExtension, "set_mover_filter_property", function (self, property, bool, ...)
	local modes = self._mover_modes
	
	fassert(bool ~= nil, "Trying to set mover filter property nil")
	fassert(modes[property] ~= nil, "Trying to set unitialized mover filter property %q.", bool)
	
	modes[property] = bool
	local filter = nil
	
	-- Preveting change of collision filter during flight, especially when using a ladder
	if not mod.is_active_FYF2 then
		if modes.ladder then
			filter = "filter_player_ladder_mover"
		elseif modes.enemy_noclip then
			filter = "filter_player_enemy_noclip_mover"
		elseif modes.dark_pact_noclip then
			filter = "filter_player_mover_pactsworn_ghost_mode"
		else
			filter = self._default_mover_filter
		end
	else
		filter = "filter_point_of_interest"
	end
	
	local mover = Unit.mover(self.unit)
	
	Mover.set_collision_filter(mover, filter)
end)

mod:hook_origin(PlayerUnitLocomotionExtension, "set_forced_velocity", function (self, velocity_forced, ...)
	if not self.disabled and (self.state == "script_driven" or self.state == "script_driven_ladder") then
		assert(IS_NEW_FRAME, "trying to set forced velocity too late in frame")
		
		if velocity_forced then
			local current_velocity_forced = self.velocity_forced
			-- Prevent the forced velocity vector from doing an addition with curren_velocity_forced which become a Stale Vector3 outside StateIngame, when the player is flying
			if not mod.is_active_FYF2 then
				self.velocity_forced = current_velocity_forced and current_velocity_forced + velocity_forced or velocity_forced
			else
				self.velocity_forced = velocity_forced
			end
		else
			self.velocity_forced = nil
		end
	end
end)

mod:hook_origin(PlayerUnitHealthExtension, "entered_kill_volume", function (self, t, ...)
	if self.is_local_player then
		local unit_id = self.unit_storage:go_id(self.unit)
		
		-- Prevent client from dying to death walls while flying
		if unit_id and not mod.is_active_FYF2 then
			local network_transmit = self.network_transmit
			local damage_type_id = NetworkLookup.damage_types.volume_insta_kill
			
			network_transmit:send_rpc_server("rpc_request_insta_kill", unit_id, damage_type_id)
		end
	end
end)

mod:hook(CharacterStateHelper, "is_ledge_hanging", function (func, world, unit, ...)
	-- Prevent the model from sticking to ledges
	if mod.is_active_FYF2 then
		if unit == Managers.player:local_player().player_unit then
			return false
		end
	end

	-- Original Function
	local result = func(world, unit, ...)
	return result
end)

mod:hook(PlayerUnitHealthExtension, "add_damage", function (func, self, attacker_unit, damage_amount, hit_zone_name, damage_type, damage_direction, damage_source_name, ...)
	-- Prevent death walls during flight
	if mod.is_active_FYF2 then
		if damage_source_name == "suicide" then
			if Managers.player:local_player() then
				if Managers.player:local_player().player_unit then
					damage_amount = 0
				end
			end
		end
	end

	-- Original Function
	local result = func(self, attacker_unit, damage_amount, hit_zone_name, damage_type, damage_direction, damage_source_name, ...)
	return result
end)

mod:hook(PlayerUnitHealthExtension, "die", function (func, self, damage_type, ...)
	-- Prevent death walls during flight
	if mod.is_active_FYF2 then
		if Managers.player:local_player() then
			if Managers.player:local_player().player_unit then
				return
			end
		end
	end

	-- Original Function
	local result = func(self, damage_type, ...)
	return result
end)

mod:hook(PlayerUnitLocomotionExtension, "teleport_to", function (func, self, pos, rot, ...)
	-- No more teleported to the portal if in the Keep
	if mod.is_active_FYF2 then
		if Managers.state.game_mode then
			if Managers.state.game_mode:game_mode_key() == "inn" then
				return
			end
		end
	end

	-- Original Function
	local result = func(self, pos, rot, ...)
	return result
end)

-- HOOKS --
--------------------

-----------------------------
-- ACTIVE MOD UI FUNCTIONS --

local SCREEN_WIDTH = 3840
local SCREEN_HEIGHT = 2160

local function get_x()
	local x =  mod:get("offset_x_FYF2")
	local x_limit = (SCREEN_WIDTH / 2)
	local max_x = math.min(mod:get("offset_x_FYF2"), x_limit)
	local min_x = math.max(mod:get("offset_x_FYF2"), -x_limit)
	if x == 0 then
		return 0
	end
	local clamped_x = (x > 0) and max_x or min_x
	return clamped_x
end

local function get_y()
	local y =  mod:get("offset_y_FYF2")
	local y_limit = (SCREEN_HEIGHT / 2)
	local max_y = math.min(mod:get("offset_y_FYF2"), y_limit)
	local min_y = math.max(mod:get("offset_y_FYF2"), -y_limit)
	if y == 0 then
		return 0
	end
	local clamped_y = -(y > 0 and max_y or min_y)
	return clamped_y
end

local fake_input_service = {
	get = function ()
	 	return
	end,
	has = function ()
		return
	end
}

local scenegraph_definition = {
	root = {
	  	scale = "fit",
	  	size = {
			SCREEN_WIDTH,
			SCREEN_HEIGHT
	  	},
	  	position = {
			0,
			0,
			UILayer.hud
	  	}
	}
}

local fyf2_ui_definition = {
	scenegraph_id = "root",
	element = {
	  	passes = {
			{
				style_id = "fyf2_text",
				pass_type = "text",
				text_id = "fyf2_text",
				retained_mode = false,
				fade_out_duration = 5,
				content_check_function = function(content)
					if mod:get("display_ui_widget_FYF2") then
						return true
					end
					return false
				end
			},
			{
				style_id = "fyf2_speed_text",
				pass_type = "text",
				text_id = "fyf2_speed_text",
				retained_mode = false,
				content_check_function = function(content)
					if mod:get("display_ui_widget_FYF2") and mod:get("display_speed_multiplier_FYF2") then
						return true
					end
					return false
				end
			}
	  	}
	},
	content = {
		fyf2_text = "",
		fyf2_speed_text = ""
	},
	style = {
		fyf2_text = {
			font_type = mod.font,
			font_size = mod:get("font_size_FYF2"),
			vertical_alignment = "center",
			horizontal_alignment = "center",
			text_color = Colors.get_table("white"),
			offset = {
				get_x(),
				get_y(),
				0
			}
		},
		fyf2_speed_text = {
			font_type = mod.font,
			font_size = mod:get("font_size_FYF2"),
			vertical_alignment = "center",
			horizontal_alignment = "center",
			text_color = Colors.get_table("white"),
			offset = {
				get_x(),
				get_y() - mod:get("font_size_FYF2"),
				0
			}
		}
	},
	offset = {
		0,
		0,
		0
	},
}

function mod:init()
	if mod.ui_widget then
	  	return
	end
	
	local font_type = mod:get("font_type_FYF2")
	if font_type == 1 then
		mod.font = "arial"
	elseif font_type == 2 then
		mod.font = "arial_write_mask"
	elseif font_type == 3 then
		mod.font = "hell_shark_arial"
	elseif font_type == 4 then
		mod.font = "hell_shark_arial_write_mask"
	elseif font_type == 5 then
		mod.font = "hell_shark"
	elseif font_type == 6 then
		mod.font = "hell_shark_write_mask"
	elseif font_type == 7 then
		mod.font = "hell_shark_header"
	elseif font_type == 8 then
		mod.font = "hell_shark_header_write_mask"
	elseif font_type == 9 then
		mod.font = "chat_output_font"
	else
		mod.font = "hell_shark_header"
	end
	
	local color = {mod:get("font_color_alpha_FYF2"), mod:get("font_color_red_FYF2"), mod:get("font_color_green_FYF2"), mod:get("font_color_blue_FYF2")} or mod.color
	
	local world = Managers.world:world("top_ingame_view")
	mod.ui_renderer = UIRenderer.create(world, "material", "materials/fonts/gw_fonts")
	mod.ui_scenegraph = UISceneGraph.init_scenegraph(scenegraph_definition)
	mod.ui_widget = UIWidget.init(fyf2_ui_definition)
end

function mod:on_setting_changed()
	if not mod.ui_widget then
	  	return
	end
	
	local font_type = mod:get("font_type_FYF2")
	if font_type == 1 then
		mod.font = "arial"
	elseif font_type == 2 then
		mod.font = "arial_write_mask"
	elseif font_type == 3 then
		mod.font = "hell_shark_arial"
	elseif font_type == 4 then
		mod.font = "hell_shark_arial_write_mask"
	elseif font_type == 5 then
		mod.font = "hell_shark"
	elseif font_type == 6 then
		mod.font = "hell_shark_write_mask"
	elseif font_type == 7 then
		mod.font = "hell_shark_header"
	elseif font_type == 8 then
		mod.font = "hell_shark_header_write_mask"
	elseif font_type == 9 then
		mod.font = "chat_output_font"
	else
		mod.font = "hell_shark_header"
	end
	
	local color = {mod:get("font_color_alpha_FYF2"), mod:get("font_color_red_FYF2"), mod:get("font_color_green_FYF2"), mod:get("font_color_blue_FYF2")} or mod.color
	
	mod.ui_widget.style.fyf2_text.offset[1] = get_x()
	mod.ui_widget.style.fyf2_text.offset[2] = get_y()
	mod.ui_widget.style.fyf2_text.font_size = mod:get("font_size_FYF2")
	mod.ui_widget.style.fyf2_text.font_type = mod.font
	mod.ui_widget.style.fyf2_text.text_color = color
	mod.ui_widget.style.fyf2_speed_text.offset[1] = get_x()
	mod.ui_widget.style.fyf2_speed_text.offset[2] = get_y() - mod:get("font_size_FYF2")
	mod.ui_widget.style.fyf2_speed_text.font_size = mod:get("font_size_FYF2")
	mod.ui_widget.style.fyf2_speed_text.font_type = mod.font
	mod.ui_widget.style.fyf2_speed_text.text_color = color
end

function mod:on_disabled()
	mod.ui_renderer = nil
	mod.ui_scenegraph = nil
	mod.ui_widget = nil
end

mod:hook_safe(IngameHud, "update", function(self)
	if self:is_own_player_dead() then
		return
	end
	
	if not mod.ui_widget then
	  	mod.init()
	end
	
	local widget = mod.ui_widget
	local ui_renderer = mod.ui_renderer
	local ui_scenegraph = mod.ui_scenegraph
	
	if mod.is_active_FYF2 then
		widget.content.fyf2_text = "Flight ON"
		widget.content.fyf2_speed_text = string.format("Flight speed multiplier: %0.1f", mod:get("speed_FYF2"))
	else
		widget.content.fyf2_text = ""
		widget.content.fyf2_speed_text = ""
	end
	
	UIRenderer.begin_pass(ui_renderer, ui_scenegraph, fake_input_service, dt)
	UIRenderer.draw_widget(ui_renderer, widget)
	UIRenderer.end_pass(ui_renderer)
end)

-- ACTIVE MOD UI FUNCTIONS --
-----------------------------